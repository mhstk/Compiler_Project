Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ERROR

Grammar

Rule 0     S' -> program
Rule 1     program -> declist MAIN LRB RRB block
Rule 2     declist -> declist dec
Rule 3     declist -> <empty>
Rule 4     dec -> vardec
Rule 5     dec -> funcdec
Rule 6     type -> INTEGER
Rule 7     type -> FLOAT
Rule 8     type -> BOOLEAN
Rule 9     iddec -> ID
Rule 10    iddec -> ID LSB exp RSB
Rule 11    iddec -> ID ASSIGN exp
Rule 12    idlist -> iddec
Rule 13    idlist -> idlist COMMA iddec
Rule 14    vardec -> idlist COLON type SEMICOLON
Rule 15    funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block
Rule 16    funcdec -> FUNCTION ID LRB paramdecs RRB block
Rule 17    paramdecs -> paramdecslist
Rule 18    paramdecs -> <empty>
Rule 19    paramdecslist -> paramdec
Rule 20    paramdecslist -> paramdecslist COMMA paramdec
Rule 21    paramdec -> ID COLON type
Rule 22    paramdec -> ID LSB RSB COLON type
Rule 23    block -> LCB stmtlist RCB
Rule 24    stmtlist -> stmtlist stmt
Rule 25    stmtlist -> <empty>
Rule 26    case -> WHERE const COLON stmtlist
Rule 27    cases -> cases case
Rule 28    cases -> <empty>
Rule 29    stmt -> RETURN exp SEMICOLON
Rule 30    stmt -> exp SEMICOLON
Rule 31    stmt -> block
Rule 32    stmt -> vardec
Rule 33    stmt -> WHILE LRB exp RRB stmt
Rule 34    stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON
Rule 35    stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
Rule 36    stmt -> FOR LRB ID IN ID RRB stmt
Rule 37    stmt -> IF LRB exp RRB stmt elseiflist
Rule 38    stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt
Rule 39    stmt -> PRINT LRB ID RRB SEMICOLON
Rule 40    elseiflist -> elseiflist ELSEIF LRB exp RRB stmt
Rule 41    elseiflist -> <empty>
Rule 42    relop -> GT
Rule 43    relop -> LT
Rule 44    relop -> NE
Rule 45    relop -> EQ
Rule 46    relop -> LE
Rule 47    relop -> GE
Rule 48    relopexp -> exp relop exp
Rule 49    relopexp -> relopexp relop exp
Rule 50    exp -> ID ASSIGN exp
Rule 51    exp -> ID LSB exp RSB ASSIGN exp
Rule 52    exp -> exp AND exp
Rule 53    exp -> exp OR exp
Rule 54    exp -> exp SUM exp
Rule 55    exp -> exp SUB exp
Rule 56    exp -> exp DIV exp
Rule 57    exp -> exp MUL exp
Rule 58    exp -> exp MOD exp
Rule 59    exp -> relopexp
Rule 60    exp -> const
Rule 61    exp -> ID LSB exp RSB
Rule 62    exp -> ID
Rule 63    exp -> ID LRB explist RRB
Rule 64    exp -> LRB exp RRB
Rule 65    exp -> ID LRB RRB
Rule 66    exp -> SUB exp
Rule 67    exp -> NOT exp
Rule 68    const -> INTEGERNUMBER
Rule 69    const -> FLOATNUMBER
Rule 70    const -> TRUE
Rule 71    const -> FALSE
Rule 72    explist -> exp
Rule 73    explist -> explist COMMA exp

Terminals, with rules where they appear

AND                  : 52
ASSIGN               : 11 50 51
BOOLEAN              : 8
COLON                : 14 15 21 22 26
COMMA                : 13 20 73
DIV                  : 56
ELSE                 : 38
ELSEIF               : 40
EQ                   : 45
ERROR                : 
FALSE                : 71
FLOAT                : 7
FLOATNUMBER          : 69
FOR                  : 35 36
FUNCTION             : 15 16
GE                   : 47
GT                   : 42
ID                   : 9 10 11 15 16 21 22 36 36 39 50 51 61 62 63 65
IF                   : 37 38
IN                   : 36
INTEGER              : 6
INTEGERNUMBER        : 68
LCB                  : 23 34
LE                   : 46
LRB                  : 1 15 16 33 34 35 36 37 38 39 40 63 64 65
LSB                  : 10 22 51 61
LT                   : 43
MAIN                 : 1
MOD                  : 58
MUL                  : 57
NE                   : 44
NOT                  : 67
ON                   : 34
OR                   : 53
PRINT                : 39
RCB                  : 23 34
RETURN               : 29
RRB                  : 1 15 16 33 34 35 36 37 38 39 40 63 64 65
RSB                  : 10 22 51 61
SEMICOLON            : 14 29 30 34 35 35 39
SUB                  : 55 66
SUM                  : 54
TRUE                 : 70
WHERE                : 26
WHILE                : 33
error                : 

Nonterminals, with rules where they appear

block                : 1 15 16 31
case                 : 27
cases                : 27 34
const                : 26 60
dec                  : 2
declist              : 1 2
elseiflist           : 37 38 40
exp                  : 10 11 29 30 33 34 35 35 35 37 38 40 48 48 49 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 61 64 66 67 72 73
explist              : 63 73
funcdec              : 5
iddec                : 12 13
idlist               : 13 14
paramdec             : 19 20
paramdecs            : 15 16
paramdecslist        : 17 20
program              : 0
relop                : 48 49
relopexp             : 49 59
stmt                 : 24 33 35 36 37 38 38 40
stmtlist             : 23 24 26
type                 : 14 15 21 22
vardec               : 4 32

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . declist MAIN LRB RRB block
    (2) declist -> . declist dec
    (3) declist -> .

    MAIN            reduce using rule 3 (declist -> .)
    FUNCTION        reduce using rule 3 (declist -> .)
    ID              reduce using rule 3 (declist -> .)

    program                        shift and go to state 1
    declist                        shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> declist . MAIN LRB RRB block
    (2) declist -> declist . dec
    (4) dec -> . vardec
    (5) dec -> . funcdec
    (14) vardec -> . idlist COLON type SEMICOLON
    (15) funcdec -> . FUNCTION ID LRB paramdecs RRB COLON type block
    (16) funcdec -> . FUNCTION ID LRB paramdecs RRB block
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    MAIN            shift and go to state 3
    FUNCTION        shift and go to state 8
    ID              shift and go to state 9

    dec                            shift and go to state 4
    vardec                         shift and go to state 5
    funcdec                        shift and go to state 6
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 3

    (1) program -> declist MAIN . LRB RRB block

    LRB             shift and go to state 11


state 4

    (2) declist -> declist dec .

    MAIN            reduce using rule 2 (declist -> declist dec .)
    FUNCTION        reduce using rule 2 (declist -> declist dec .)
    ID              reduce using rule 2 (declist -> declist dec .)


state 5

    (4) dec -> vardec .

    MAIN            reduce using rule 4 (dec -> vardec .)
    FUNCTION        reduce using rule 4 (dec -> vardec .)
    ID              reduce using rule 4 (dec -> vardec .)


state 6

    (5) dec -> funcdec .

    MAIN            reduce using rule 5 (dec -> funcdec .)
    FUNCTION        reduce using rule 5 (dec -> funcdec .)
    ID              reduce using rule 5 (dec -> funcdec .)


state 7

    (14) vardec -> idlist . COLON type SEMICOLON
    (13) idlist -> idlist . COMMA iddec

    COLON           shift and go to state 12
    COMMA           shift and go to state 13


state 8

    (15) funcdec -> FUNCTION . ID LRB paramdecs RRB COLON type block
    (16) funcdec -> FUNCTION . ID LRB paramdecs RRB block

    ID              shift and go to state 14


state 9

    (9) iddec -> ID .
    (10) iddec -> ID . LSB exp RSB
    (11) iddec -> ID . ASSIGN exp

    COLON           reduce using rule 9 (iddec -> ID .)
    COMMA           reduce using rule 9 (iddec -> ID .)
    LSB             shift and go to state 15
    ASSIGN          shift and go to state 16


state 10

    (12) idlist -> iddec .

    COLON           reduce using rule 12 (idlist -> iddec .)
    COMMA           reduce using rule 12 (idlist -> iddec .)


state 11

    (1) program -> declist MAIN LRB . RRB block

    RRB             shift and go to state 17


state 12

    (14) vardec -> idlist COLON . type SEMICOLON
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21

    type                           shift and go to state 18

state 13

    (13) idlist -> idlist COMMA . iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    ID              shift and go to state 9

    iddec                          shift and go to state 22

state 14

    (15) funcdec -> FUNCTION ID . LRB paramdecs RRB COLON type block
    (16) funcdec -> FUNCTION ID . LRB paramdecs RRB block

    LRB             shift and go to state 23


state 15

    (10) iddec -> ID LSB . exp RSB
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 25
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 16

    (11) iddec -> ID ASSIGN . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 35
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 17

    (1) program -> declist MAIN LRB RRB . block
    (23) block -> . LCB stmtlist RCB

    LCB             shift and go to state 37

    block                          shift and go to state 36

state 18

    (14) vardec -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 38


state 19

    (6) type -> INTEGER .

    SEMICOLON       reduce using rule 6 (type -> INTEGER .)
    COMMA           reduce using rule 6 (type -> INTEGER .)
    RRB             reduce using rule 6 (type -> INTEGER .)
    LCB             reduce using rule 6 (type -> INTEGER .)


state 20

    (7) type -> FLOAT .

    SEMICOLON       reduce using rule 7 (type -> FLOAT .)
    COMMA           reduce using rule 7 (type -> FLOAT .)
    RRB             reduce using rule 7 (type -> FLOAT .)
    LCB             reduce using rule 7 (type -> FLOAT .)


state 21

    (8) type -> BOOLEAN .

    SEMICOLON       reduce using rule 8 (type -> BOOLEAN .)
    COMMA           reduce using rule 8 (type -> BOOLEAN .)
    RRB             reduce using rule 8 (type -> BOOLEAN .)
    LCB             reduce using rule 8 (type -> BOOLEAN .)


state 22

    (13) idlist -> idlist COMMA iddec .

    COLON           reduce using rule 13 (idlist -> idlist COMMA iddec .)
    COMMA           reduce using rule 13 (idlist -> idlist COMMA iddec .)


state 23

    (15) funcdec -> FUNCTION ID LRB . paramdecs RRB COLON type block
    (16) funcdec -> FUNCTION ID LRB . paramdecs RRB block
    (17) paramdecs -> . paramdecslist
    (18) paramdecs -> .
    (19) paramdecslist -> . paramdec
    (20) paramdecslist -> . paramdecslist COMMA paramdec
    (21) paramdec -> . ID COLON type
    (22) paramdec -> . ID LSB RSB COLON type

    RRB             reduce using rule 18 (paramdecs -> .)
    ID              shift and go to state 39

    paramdecs                      shift and go to state 40
    paramdecslist                  shift and go to state 41
    paramdec                       shift and go to state 42

state 24

    (50) exp -> ID . ASSIGN exp
    (51) exp -> ID . LSB exp RSB ASSIGN exp
    (61) exp -> ID . LSB exp RSB
    (62) exp -> ID .
    (63) exp -> ID . LRB explist RRB
    (65) exp -> ID . LRB RRB

    ASSIGN          shift and go to state 43
    LSB             shift and go to state 44
    RSB             reduce using rule 62 (exp -> ID .)
    AND             reduce using rule 62 (exp -> ID .)
    OR              reduce using rule 62 (exp -> ID .)
    SUM             reduce using rule 62 (exp -> ID .)
    SUB             reduce using rule 62 (exp -> ID .)
    DIV             reduce using rule 62 (exp -> ID .)
    MUL             reduce using rule 62 (exp -> ID .)
    MOD             reduce using rule 62 (exp -> ID .)
    GT              reduce using rule 62 (exp -> ID .)
    LT              reduce using rule 62 (exp -> ID .)
    NE              reduce using rule 62 (exp -> ID .)
    EQ              reduce using rule 62 (exp -> ID .)
    LE              reduce using rule 62 (exp -> ID .)
    GE              reduce using rule 62 (exp -> ID .)
    COLON           reduce using rule 62 (exp -> ID .)
    COMMA           reduce using rule 62 (exp -> ID .)
    RRB             reduce using rule 62 (exp -> ID .)
    SEMICOLON       reduce using rule 62 (exp -> ID .)
    LRB             shift and go to state 45


state 25

    (10) iddec -> ID LSB exp . RSB
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             shift and go to state 46
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 26

    (66) exp -> SUB . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 61
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 27

    (59) exp -> relopexp .
    (49) relopexp -> relopexp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 59 (exp -> relopexp .)
    AND             reduce using rule 59 (exp -> relopexp .)
    OR              reduce using rule 59 (exp -> relopexp .)
    SUM             reduce using rule 59 (exp -> relopexp .)
    SUB             reduce using rule 59 (exp -> relopexp .)
    DIV             reduce using rule 59 (exp -> relopexp .)
    MUL             reduce using rule 59 (exp -> relopexp .)
    MOD             reduce using rule 59 (exp -> relopexp .)
    COLON           reduce using rule 59 (exp -> relopexp .)
    COMMA           reduce using rule 59 (exp -> relopexp .)
    RRB             reduce using rule 59 (exp -> relopexp .)
    SEMICOLON       reduce using rule 59 (exp -> relopexp .)
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! GT              [ reduce using rule 59 (exp -> relopexp .) ]
  ! LT              [ reduce using rule 59 (exp -> relopexp .) ]
  ! NE              [ reduce using rule 59 (exp -> relopexp .) ]
  ! EQ              [ reduce using rule 59 (exp -> relopexp .) ]
  ! LE              [ reduce using rule 59 (exp -> relopexp .) ]
  ! GE              [ reduce using rule 59 (exp -> relopexp .) ]

    relop                          shift and go to state 62

state 28

    (60) exp -> const .

    RSB             reduce using rule 60 (exp -> const .)
    AND             reduce using rule 60 (exp -> const .)
    OR              reduce using rule 60 (exp -> const .)
    SUM             reduce using rule 60 (exp -> const .)
    SUB             reduce using rule 60 (exp -> const .)
    DIV             reduce using rule 60 (exp -> const .)
    MUL             reduce using rule 60 (exp -> const .)
    MOD             reduce using rule 60 (exp -> const .)
    GT              reduce using rule 60 (exp -> const .)
    LT              reduce using rule 60 (exp -> const .)
    NE              reduce using rule 60 (exp -> const .)
    EQ              reduce using rule 60 (exp -> const .)
    LE              reduce using rule 60 (exp -> const .)
    GE              reduce using rule 60 (exp -> const .)
    COLON           reduce using rule 60 (exp -> const .)
    COMMA           reduce using rule 60 (exp -> const .)
    RRB             reduce using rule 60 (exp -> const .)
    SEMICOLON       reduce using rule 60 (exp -> const .)


state 29

    (64) exp -> LRB . exp RRB
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 63
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 30

    (67) exp -> NOT . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 64
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 31

    (68) const -> INTEGERNUMBER .

    RSB             reduce using rule 68 (const -> INTEGERNUMBER .)
    AND             reduce using rule 68 (const -> INTEGERNUMBER .)
    OR              reduce using rule 68 (const -> INTEGERNUMBER .)
    SUM             reduce using rule 68 (const -> INTEGERNUMBER .)
    SUB             reduce using rule 68 (const -> INTEGERNUMBER .)
    DIV             reduce using rule 68 (const -> INTEGERNUMBER .)
    MUL             reduce using rule 68 (const -> INTEGERNUMBER .)
    MOD             reduce using rule 68 (const -> INTEGERNUMBER .)
    GT              reduce using rule 68 (const -> INTEGERNUMBER .)
    LT              reduce using rule 68 (const -> INTEGERNUMBER .)
    NE              reduce using rule 68 (const -> INTEGERNUMBER .)
    EQ              reduce using rule 68 (const -> INTEGERNUMBER .)
    LE              reduce using rule 68 (const -> INTEGERNUMBER .)
    GE              reduce using rule 68 (const -> INTEGERNUMBER .)
    COLON           reduce using rule 68 (const -> INTEGERNUMBER .)
    COMMA           reduce using rule 68 (const -> INTEGERNUMBER .)
    RRB             reduce using rule 68 (const -> INTEGERNUMBER .)
    SEMICOLON       reduce using rule 68 (const -> INTEGERNUMBER .)


state 32

    (69) const -> FLOATNUMBER .

    RSB             reduce using rule 69 (const -> FLOATNUMBER .)
    AND             reduce using rule 69 (const -> FLOATNUMBER .)
    OR              reduce using rule 69 (const -> FLOATNUMBER .)
    SUM             reduce using rule 69 (const -> FLOATNUMBER .)
    SUB             reduce using rule 69 (const -> FLOATNUMBER .)
    DIV             reduce using rule 69 (const -> FLOATNUMBER .)
    MUL             reduce using rule 69 (const -> FLOATNUMBER .)
    MOD             reduce using rule 69 (const -> FLOATNUMBER .)
    GT              reduce using rule 69 (const -> FLOATNUMBER .)
    LT              reduce using rule 69 (const -> FLOATNUMBER .)
    NE              reduce using rule 69 (const -> FLOATNUMBER .)
    EQ              reduce using rule 69 (const -> FLOATNUMBER .)
    LE              reduce using rule 69 (const -> FLOATNUMBER .)
    GE              reduce using rule 69 (const -> FLOATNUMBER .)
    COLON           reduce using rule 69 (const -> FLOATNUMBER .)
    COMMA           reduce using rule 69 (const -> FLOATNUMBER .)
    RRB             reduce using rule 69 (const -> FLOATNUMBER .)
    SEMICOLON       reduce using rule 69 (const -> FLOATNUMBER .)


state 33

    (70) const -> TRUE .

    RSB             reduce using rule 70 (const -> TRUE .)
    AND             reduce using rule 70 (const -> TRUE .)
    OR              reduce using rule 70 (const -> TRUE .)
    SUM             reduce using rule 70 (const -> TRUE .)
    SUB             reduce using rule 70 (const -> TRUE .)
    DIV             reduce using rule 70 (const -> TRUE .)
    MUL             reduce using rule 70 (const -> TRUE .)
    MOD             reduce using rule 70 (const -> TRUE .)
    GT              reduce using rule 70 (const -> TRUE .)
    LT              reduce using rule 70 (const -> TRUE .)
    NE              reduce using rule 70 (const -> TRUE .)
    EQ              reduce using rule 70 (const -> TRUE .)
    LE              reduce using rule 70 (const -> TRUE .)
    GE              reduce using rule 70 (const -> TRUE .)
    COLON           reduce using rule 70 (const -> TRUE .)
    COMMA           reduce using rule 70 (const -> TRUE .)
    RRB             reduce using rule 70 (const -> TRUE .)
    SEMICOLON       reduce using rule 70 (const -> TRUE .)


state 34

    (71) const -> FALSE .

    RSB             reduce using rule 71 (const -> FALSE .)
    AND             reduce using rule 71 (const -> FALSE .)
    OR              reduce using rule 71 (const -> FALSE .)
    SUM             reduce using rule 71 (const -> FALSE .)
    SUB             reduce using rule 71 (const -> FALSE .)
    DIV             reduce using rule 71 (const -> FALSE .)
    MUL             reduce using rule 71 (const -> FALSE .)
    MOD             reduce using rule 71 (const -> FALSE .)
    GT              reduce using rule 71 (const -> FALSE .)
    LT              reduce using rule 71 (const -> FALSE .)
    NE              reduce using rule 71 (const -> FALSE .)
    EQ              reduce using rule 71 (const -> FALSE .)
    LE              reduce using rule 71 (const -> FALSE .)
    GE              reduce using rule 71 (const -> FALSE .)
    COLON           reduce using rule 71 (const -> FALSE .)
    COMMA           reduce using rule 71 (const -> FALSE .)
    RRB             reduce using rule 71 (const -> FALSE .)
    SEMICOLON       reduce using rule 71 (const -> FALSE .)


state 35

    (11) iddec -> ID ASSIGN exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    COLON           reduce using rule 11 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 11 (iddec -> ID ASSIGN exp .)
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 36

    (1) program -> declist MAIN LRB RRB block .

    $end            reduce using rule 1 (program -> declist MAIN LRB RRB block .)


state 37

    (23) block -> LCB . stmtlist RCB
    (24) stmtlist -> . stmtlist stmt
    (25) stmtlist -> .

    RCB             reduce using rule 25 (stmtlist -> .)
    RETURN          reduce using rule 25 (stmtlist -> .)
    WHILE           reduce using rule 25 (stmtlist -> .)
    ON              reduce using rule 25 (stmtlist -> .)
    FOR             reduce using rule 25 (stmtlist -> .)
    IF              reduce using rule 25 (stmtlist -> .)
    PRINT           reduce using rule 25 (stmtlist -> .)
    ID              reduce using rule 25 (stmtlist -> .)
    LRB             reduce using rule 25 (stmtlist -> .)
    SUB             reduce using rule 25 (stmtlist -> .)
    NOT             reduce using rule 25 (stmtlist -> .)
    LCB             reduce using rule 25 (stmtlist -> .)
    INTEGERNUMBER   reduce using rule 25 (stmtlist -> .)
    FLOATNUMBER     reduce using rule 25 (stmtlist -> .)
    TRUE            reduce using rule 25 (stmtlist -> .)
    FALSE           reduce using rule 25 (stmtlist -> .)

    stmtlist                       shift and go to state 65

state 38

    (14) vardec -> idlist COLON type SEMICOLON .

    MAIN            reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    FUNCTION        reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    ID              reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    RCB             reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    RETURN          reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    WHILE           reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    ON              reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    FOR             reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    IF              reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    PRINT           reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    LRB             reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    SUB             reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    NOT             reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    LCB             reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    INTEGERNUMBER   reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    FLOATNUMBER     reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    TRUE            reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    FALSE           reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    ELSE            reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    ELSEIF          reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)
    WHERE           reduce using rule 14 (vardec -> idlist COLON type SEMICOLON .)


state 39

    (21) paramdec -> ID . COLON type
    (22) paramdec -> ID . LSB RSB COLON type

    COLON           shift and go to state 66
    LSB             shift and go to state 67


state 40

    (15) funcdec -> FUNCTION ID LRB paramdecs . RRB COLON type block
    (16) funcdec -> FUNCTION ID LRB paramdecs . RRB block

    RRB             shift and go to state 68


state 41

    (17) paramdecs -> paramdecslist .
    (20) paramdecslist -> paramdecslist . COMMA paramdec

    RRB             reduce using rule 17 (paramdecs -> paramdecslist .)
    COMMA           shift and go to state 69


state 42

    (19) paramdecslist -> paramdec .

    COMMA           reduce using rule 19 (paramdecslist -> paramdec .)
    RRB             reduce using rule 19 (paramdecslist -> paramdec .)


state 43

    (50) exp -> ID ASSIGN . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 70
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 44

    (51) exp -> ID LSB . exp RSB ASSIGN exp
    (61) exp -> ID LSB . exp RSB
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 71
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 45

    (63) exp -> ID LRB . explist RRB
    (65) exp -> ID LRB . RRB
    (72) explist -> . exp
    (73) explist -> . explist COMMA exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    RRB             shift and go to state 73
    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    explist                        shift and go to state 72
    exp                            shift and go to state 74
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 46

    (10) iddec -> ID LSB exp RSB .

    COLON           reduce using rule 10 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 10 (iddec -> ID LSB exp RSB .)


state 47

    (52) exp -> exp AND . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 75
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 48

    (53) exp -> exp OR . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 76
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 49

    (54) exp -> exp SUM . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 77
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 50

    (55) exp -> exp SUB . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 78
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 51

    (56) exp -> exp DIV . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 79
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 52

    (57) exp -> exp MUL . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 80
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 53

    (58) exp -> exp MOD . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 81
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 54

    (48) relopexp -> exp relop . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 82
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 55

    (42) relop -> GT .

    ID              reduce using rule 42 (relop -> GT .)
    LRB             reduce using rule 42 (relop -> GT .)
    SUB             reduce using rule 42 (relop -> GT .)
    NOT             reduce using rule 42 (relop -> GT .)
    INTEGERNUMBER   reduce using rule 42 (relop -> GT .)
    FLOATNUMBER     reduce using rule 42 (relop -> GT .)
    TRUE            reduce using rule 42 (relop -> GT .)
    FALSE           reduce using rule 42 (relop -> GT .)


state 56

    (43) relop -> LT .

    ID              reduce using rule 43 (relop -> LT .)
    LRB             reduce using rule 43 (relop -> LT .)
    SUB             reduce using rule 43 (relop -> LT .)
    NOT             reduce using rule 43 (relop -> LT .)
    INTEGERNUMBER   reduce using rule 43 (relop -> LT .)
    FLOATNUMBER     reduce using rule 43 (relop -> LT .)
    TRUE            reduce using rule 43 (relop -> LT .)
    FALSE           reduce using rule 43 (relop -> LT .)


state 57

    (44) relop -> NE .

    ID              reduce using rule 44 (relop -> NE .)
    LRB             reduce using rule 44 (relop -> NE .)
    SUB             reduce using rule 44 (relop -> NE .)
    NOT             reduce using rule 44 (relop -> NE .)
    INTEGERNUMBER   reduce using rule 44 (relop -> NE .)
    FLOATNUMBER     reduce using rule 44 (relop -> NE .)
    TRUE            reduce using rule 44 (relop -> NE .)
    FALSE           reduce using rule 44 (relop -> NE .)


state 58

    (45) relop -> EQ .

    ID              reduce using rule 45 (relop -> EQ .)
    LRB             reduce using rule 45 (relop -> EQ .)
    SUB             reduce using rule 45 (relop -> EQ .)
    NOT             reduce using rule 45 (relop -> EQ .)
    INTEGERNUMBER   reduce using rule 45 (relop -> EQ .)
    FLOATNUMBER     reduce using rule 45 (relop -> EQ .)
    TRUE            reduce using rule 45 (relop -> EQ .)
    FALSE           reduce using rule 45 (relop -> EQ .)


state 59

    (46) relop -> LE .

    ID              reduce using rule 46 (relop -> LE .)
    LRB             reduce using rule 46 (relop -> LE .)
    SUB             reduce using rule 46 (relop -> LE .)
    NOT             reduce using rule 46 (relop -> LE .)
    INTEGERNUMBER   reduce using rule 46 (relop -> LE .)
    FLOATNUMBER     reduce using rule 46 (relop -> LE .)
    TRUE            reduce using rule 46 (relop -> LE .)
    FALSE           reduce using rule 46 (relop -> LE .)


state 60

    (47) relop -> GE .

    ID              reduce using rule 47 (relop -> GE .)
    LRB             reduce using rule 47 (relop -> GE .)
    SUB             reduce using rule 47 (relop -> GE .)
    NOT             reduce using rule 47 (relop -> GE .)
    INTEGERNUMBER   reduce using rule 47 (relop -> GE .)
    FLOATNUMBER     reduce using rule 47 (relop -> GE .)
    TRUE            reduce using rule 47 (relop -> GE .)
    FALSE           reduce using rule 47 (relop -> GE .)


state 61

    (66) exp -> SUB exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             reduce using rule 66 (exp -> SUB exp .)
    AND             reduce using rule 66 (exp -> SUB exp .)
    OR              reduce using rule 66 (exp -> SUB exp .)
    SUM             reduce using rule 66 (exp -> SUB exp .)
    SUB             reduce using rule 66 (exp -> SUB exp .)
    GT              reduce using rule 66 (exp -> SUB exp .)
    LT              reduce using rule 66 (exp -> SUB exp .)
    NE              reduce using rule 66 (exp -> SUB exp .)
    EQ              reduce using rule 66 (exp -> SUB exp .)
    LE              reduce using rule 66 (exp -> SUB exp .)
    GE              reduce using rule 66 (exp -> SUB exp .)
    COLON           reduce using rule 66 (exp -> SUB exp .)
    COMMA           reduce using rule 66 (exp -> SUB exp .)
    RRB             reduce using rule 66 (exp -> SUB exp .)
    SEMICOLON       reduce using rule 66 (exp -> SUB exp .)
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53

  ! DIV             [ reduce using rule 66 (exp -> SUB exp .) ]
  ! MUL             [ reduce using rule 66 (exp -> SUB exp .) ]
  ! MOD             [ reduce using rule 66 (exp -> SUB exp .) ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! SUM             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! GT              [ shift and go to state 55 ]
  ! LT              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 60 ]

    relop                          shift and go to state 54

state 62

    (49) relopexp -> relopexp relop . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    relopexp                       shift and go to state 27
    exp                            shift and go to state 83
    const                          shift and go to state 28

state 63

    (64) exp -> LRB exp . RRB
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RRB             shift and go to state 84
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 64

    (67) exp -> NOT exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             reduce using rule 67 (exp -> NOT exp .)
    AND             reduce using rule 67 (exp -> NOT exp .)
    OR              reduce using rule 67 (exp -> NOT exp .)
    SUM             reduce using rule 67 (exp -> NOT exp .)
    SUB             reduce using rule 67 (exp -> NOT exp .)
    DIV             reduce using rule 67 (exp -> NOT exp .)
    MUL             reduce using rule 67 (exp -> NOT exp .)
    MOD             reduce using rule 67 (exp -> NOT exp .)
    GT              reduce using rule 67 (exp -> NOT exp .)
    LT              reduce using rule 67 (exp -> NOT exp .)
    NE              reduce using rule 67 (exp -> NOT exp .)
    EQ              reduce using rule 67 (exp -> NOT exp .)
    LE              reduce using rule 67 (exp -> NOT exp .)
    GE              reduce using rule 67 (exp -> NOT exp .)
    COLON           reduce using rule 67 (exp -> NOT exp .)
    COMMA           reduce using rule 67 (exp -> NOT exp .)
    RRB             reduce using rule 67 (exp -> NOT exp .)
    SEMICOLON       reduce using rule 67 (exp -> NOT exp .)

  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! SUM             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! DIV             [ shift and go to state 51 ]
  ! MUL             [ shift and go to state 52 ]
  ! MOD             [ shift and go to state 53 ]
  ! GT              [ shift and go to state 55 ]
  ! LT              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 60 ]

    relop                          shift and go to state 54

state 65

    (23) block -> LCB stmtlist . RCB
    (24) stmtlist -> stmtlist . stmt
    (29) stmt -> . RETURN exp SEMICOLON
    (30) stmt -> . exp SEMICOLON
    (31) stmt -> . block
    (32) stmt -> . vardec
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (35) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (36) stmt -> . FOR LRB ID IN ID RRB stmt
    (37) stmt -> . IF LRB exp RRB stmt elseiflist
    (38) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (39) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    RCB             shift and go to state 85
    RETURN          shift and go to state 87
    WHILE           shift and go to state 91
    ON              shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 94
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    LCB             shift and go to state 37
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    stmt                           shift and go to state 86
    exp                            shift and go to state 88
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    relopexp                       shift and go to state 27
    const                          shift and go to state 28
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 66

    (21) paramdec -> ID COLON . type
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21

    type                           shift and go to state 97

state 67

    (22) paramdec -> ID LSB . RSB COLON type

    RSB             shift and go to state 98


state 68

    (15) funcdec -> FUNCTION ID LRB paramdecs RRB . COLON type block
    (16) funcdec -> FUNCTION ID LRB paramdecs RRB . block
    (23) block -> . LCB stmtlist RCB

    COLON           shift and go to state 99
    LCB             shift and go to state 37

    block                          shift and go to state 100

state 69

    (20) paramdecslist -> paramdecslist COMMA . paramdec
    (21) paramdec -> . ID COLON type
    (22) paramdec -> . ID LSB RSB COLON type

    ID              shift and go to state 39

    paramdec                       shift and go to state 101

state 70

    (50) exp -> ID ASSIGN exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             reduce using rule 50 (exp -> ID ASSIGN exp .)
    COLON           reduce using rule 50 (exp -> ID ASSIGN exp .)
    COMMA           reduce using rule 50 (exp -> ID ASSIGN exp .)
    RRB             reduce using rule 50 (exp -> ID ASSIGN exp .)
    SEMICOLON       reduce using rule 50 (exp -> ID ASSIGN exp .)
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! AND             [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! OR              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! SUM             [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! SUB             [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! MUL             [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! MOD             [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! GT              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! LT              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! NE              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! EQ              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! LE              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! GE              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]

    relop                          shift and go to state 54

state 71

    (51) exp -> ID LSB exp . RSB ASSIGN exp
    (61) exp -> ID LSB exp . RSB
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             shift and go to state 102
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 72

    (63) exp -> ID LRB explist . RRB
    (73) explist -> explist . COMMA exp

    RRB             shift and go to state 103
    COMMA           shift and go to state 104


state 73

    (65) exp -> ID LRB RRB .

    RSB             reduce using rule 65 (exp -> ID LRB RRB .)
    AND             reduce using rule 65 (exp -> ID LRB RRB .)
    OR              reduce using rule 65 (exp -> ID LRB RRB .)
    SUM             reduce using rule 65 (exp -> ID LRB RRB .)
    SUB             reduce using rule 65 (exp -> ID LRB RRB .)
    DIV             reduce using rule 65 (exp -> ID LRB RRB .)
    MUL             reduce using rule 65 (exp -> ID LRB RRB .)
    MOD             reduce using rule 65 (exp -> ID LRB RRB .)
    GT              reduce using rule 65 (exp -> ID LRB RRB .)
    LT              reduce using rule 65 (exp -> ID LRB RRB .)
    NE              reduce using rule 65 (exp -> ID LRB RRB .)
    EQ              reduce using rule 65 (exp -> ID LRB RRB .)
    LE              reduce using rule 65 (exp -> ID LRB RRB .)
    GE              reduce using rule 65 (exp -> ID LRB RRB .)
    COLON           reduce using rule 65 (exp -> ID LRB RRB .)
    COMMA           reduce using rule 65 (exp -> ID LRB RRB .)
    RRB             reduce using rule 65 (exp -> ID LRB RRB .)
    SEMICOLON       reduce using rule 65 (exp -> ID LRB RRB .)


state 74

    (72) explist -> exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RRB             reduce using rule 72 (explist -> exp .)
    COMMA           reduce using rule 72 (explist -> exp .)
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 75

    (52) exp -> exp AND exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             reduce using rule 52 (exp -> exp AND exp .)
    AND             reduce using rule 52 (exp -> exp AND exp .)
    OR              reduce using rule 52 (exp -> exp AND exp .)
    COLON           reduce using rule 52 (exp -> exp AND exp .)
    COMMA           reduce using rule 52 (exp -> exp AND exp .)
    RRB             reduce using rule 52 (exp -> exp AND exp .)
    SEMICOLON       reduce using rule 52 (exp -> exp AND exp .)
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! SUM             [ reduce using rule 52 (exp -> exp AND exp .) ]
  ! SUB             [ reduce using rule 52 (exp -> exp AND exp .) ]
  ! DIV             [ reduce using rule 52 (exp -> exp AND exp .) ]
  ! MUL             [ reduce using rule 52 (exp -> exp AND exp .) ]
  ! MOD             [ reduce using rule 52 (exp -> exp AND exp .) ]
  ! GT              [ reduce using rule 52 (exp -> exp AND exp .) ]
  ! LT              [ reduce using rule 52 (exp -> exp AND exp .) ]
  ! NE              [ reduce using rule 52 (exp -> exp AND exp .) ]
  ! EQ              [ reduce using rule 52 (exp -> exp AND exp .) ]
  ! LE              [ reduce using rule 52 (exp -> exp AND exp .) ]
  ! GE              [ reduce using rule 52 (exp -> exp AND exp .) ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]

    relop                          shift and go to state 54

state 76

    (53) exp -> exp OR exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             reduce using rule 53 (exp -> exp OR exp .)
    OR              reduce using rule 53 (exp -> exp OR exp .)
    COLON           reduce using rule 53 (exp -> exp OR exp .)
    COMMA           reduce using rule 53 (exp -> exp OR exp .)
    RRB             reduce using rule 53 (exp -> exp OR exp .)
    SEMICOLON       reduce using rule 53 (exp -> exp OR exp .)
    AND             shift and go to state 47
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! AND             [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! SUM             [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! SUB             [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! DIV             [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! MUL             [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! MOD             [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! GT              [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! LT              [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! NE              [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! EQ              [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! LE              [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! GE              [ reduce using rule 53 (exp -> exp OR exp .) ]
  ! OR              [ shift and go to state 48 ]

    relop                          shift and go to state 54

state 77

    (54) exp -> exp SUM exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             reduce using rule 54 (exp -> exp SUM exp .)
    AND             reduce using rule 54 (exp -> exp SUM exp .)
    OR              reduce using rule 54 (exp -> exp SUM exp .)
    SUM             reduce using rule 54 (exp -> exp SUM exp .)
    SUB             reduce using rule 54 (exp -> exp SUM exp .)
    GT              reduce using rule 54 (exp -> exp SUM exp .)
    LT              reduce using rule 54 (exp -> exp SUM exp .)
    NE              reduce using rule 54 (exp -> exp SUM exp .)
    EQ              reduce using rule 54 (exp -> exp SUM exp .)
    LE              reduce using rule 54 (exp -> exp SUM exp .)
    GE              reduce using rule 54 (exp -> exp SUM exp .)
    COLON           reduce using rule 54 (exp -> exp SUM exp .)
    COMMA           reduce using rule 54 (exp -> exp SUM exp .)
    RRB             reduce using rule 54 (exp -> exp SUM exp .)
    SEMICOLON       reduce using rule 54 (exp -> exp SUM exp .)
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53

  ! DIV             [ reduce using rule 54 (exp -> exp SUM exp .) ]
  ! MUL             [ reduce using rule 54 (exp -> exp SUM exp .) ]
  ! MOD             [ reduce using rule 54 (exp -> exp SUM exp .) ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! SUM             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! GT              [ shift and go to state 55 ]
  ! LT              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 60 ]

    relop                          shift and go to state 54

state 78

    (55) exp -> exp SUB exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             reduce using rule 55 (exp -> exp SUB exp .)
    AND             reduce using rule 55 (exp -> exp SUB exp .)
    OR              reduce using rule 55 (exp -> exp SUB exp .)
    SUM             reduce using rule 55 (exp -> exp SUB exp .)
    SUB             reduce using rule 55 (exp -> exp SUB exp .)
    GT              reduce using rule 55 (exp -> exp SUB exp .)
    LT              reduce using rule 55 (exp -> exp SUB exp .)
    NE              reduce using rule 55 (exp -> exp SUB exp .)
    EQ              reduce using rule 55 (exp -> exp SUB exp .)
    LE              reduce using rule 55 (exp -> exp SUB exp .)
    GE              reduce using rule 55 (exp -> exp SUB exp .)
    COLON           reduce using rule 55 (exp -> exp SUB exp .)
    COMMA           reduce using rule 55 (exp -> exp SUB exp .)
    RRB             reduce using rule 55 (exp -> exp SUB exp .)
    SEMICOLON       reduce using rule 55 (exp -> exp SUB exp .)
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53

  ! DIV             [ reduce using rule 55 (exp -> exp SUB exp .) ]
  ! MUL             [ reduce using rule 55 (exp -> exp SUB exp .) ]
  ! MOD             [ reduce using rule 55 (exp -> exp SUB exp .) ]
  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! SUM             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! GT              [ shift and go to state 55 ]
  ! LT              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 60 ]

    relop                          shift and go to state 54

state 79

    (56) exp -> exp DIV exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             reduce using rule 56 (exp -> exp DIV exp .)
    AND             reduce using rule 56 (exp -> exp DIV exp .)
    OR              reduce using rule 56 (exp -> exp DIV exp .)
    SUM             reduce using rule 56 (exp -> exp DIV exp .)
    SUB             reduce using rule 56 (exp -> exp DIV exp .)
    DIV             reduce using rule 56 (exp -> exp DIV exp .)
    MUL             reduce using rule 56 (exp -> exp DIV exp .)
    MOD             reduce using rule 56 (exp -> exp DIV exp .)
    GT              reduce using rule 56 (exp -> exp DIV exp .)
    LT              reduce using rule 56 (exp -> exp DIV exp .)
    NE              reduce using rule 56 (exp -> exp DIV exp .)
    EQ              reduce using rule 56 (exp -> exp DIV exp .)
    LE              reduce using rule 56 (exp -> exp DIV exp .)
    GE              reduce using rule 56 (exp -> exp DIV exp .)
    COLON           reduce using rule 56 (exp -> exp DIV exp .)
    COMMA           reduce using rule 56 (exp -> exp DIV exp .)
    RRB             reduce using rule 56 (exp -> exp DIV exp .)
    SEMICOLON       reduce using rule 56 (exp -> exp DIV exp .)

  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! SUM             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! DIV             [ shift and go to state 51 ]
  ! MUL             [ shift and go to state 52 ]
  ! MOD             [ shift and go to state 53 ]
  ! GT              [ shift and go to state 55 ]
  ! LT              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 60 ]

    relop                          shift and go to state 54

state 80

    (57) exp -> exp MUL exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             reduce using rule 57 (exp -> exp MUL exp .)
    AND             reduce using rule 57 (exp -> exp MUL exp .)
    OR              reduce using rule 57 (exp -> exp MUL exp .)
    SUM             reduce using rule 57 (exp -> exp MUL exp .)
    SUB             reduce using rule 57 (exp -> exp MUL exp .)
    DIV             reduce using rule 57 (exp -> exp MUL exp .)
    MUL             reduce using rule 57 (exp -> exp MUL exp .)
    MOD             reduce using rule 57 (exp -> exp MUL exp .)
    GT              reduce using rule 57 (exp -> exp MUL exp .)
    LT              reduce using rule 57 (exp -> exp MUL exp .)
    NE              reduce using rule 57 (exp -> exp MUL exp .)
    EQ              reduce using rule 57 (exp -> exp MUL exp .)
    LE              reduce using rule 57 (exp -> exp MUL exp .)
    GE              reduce using rule 57 (exp -> exp MUL exp .)
    COLON           reduce using rule 57 (exp -> exp MUL exp .)
    COMMA           reduce using rule 57 (exp -> exp MUL exp .)
    RRB             reduce using rule 57 (exp -> exp MUL exp .)
    SEMICOLON       reduce using rule 57 (exp -> exp MUL exp .)

  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! SUM             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! DIV             [ shift and go to state 51 ]
  ! MUL             [ shift and go to state 52 ]
  ! MOD             [ shift and go to state 53 ]
  ! GT              [ shift and go to state 55 ]
  ! LT              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 60 ]

    relop                          shift and go to state 54

state 81

    (58) exp -> exp MOD exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             reduce using rule 58 (exp -> exp MOD exp .)
    AND             reduce using rule 58 (exp -> exp MOD exp .)
    OR              reduce using rule 58 (exp -> exp MOD exp .)
    SUM             reduce using rule 58 (exp -> exp MOD exp .)
    SUB             reduce using rule 58 (exp -> exp MOD exp .)
    DIV             reduce using rule 58 (exp -> exp MOD exp .)
    MUL             reduce using rule 58 (exp -> exp MOD exp .)
    MOD             reduce using rule 58 (exp -> exp MOD exp .)
    GT              reduce using rule 58 (exp -> exp MOD exp .)
    LT              reduce using rule 58 (exp -> exp MOD exp .)
    NE              reduce using rule 58 (exp -> exp MOD exp .)
    EQ              reduce using rule 58 (exp -> exp MOD exp .)
    LE              reduce using rule 58 (exp -> exp MOD exp .)
    GE              reduce using rule 58 (exp -> exp MOD exp .)
    COLON           reduce using rule 58 (exp -> exp MOD exp .)
    COMMA           reduce using rule 58 (exp -> exp MOD exp .)
    RRB             reduce using rule 58 (exp -> exp MOD exp .)
    SEMICOLON       reduce using rule 58 (exp -> exp MOD exp .)

  ! AND             [ shift and go to state 47 ]
  ! OR              [ shift and go to state 48 ]
  ! SUM             [ shift and go to state 49 ]
  ! SUB             [ shift and go to state 50 ]
  ! DIV             [ shift and go to state 51 ]
  ! MUL             [ shift and go to state 52 ]
  ! MOD             [ shift and go to state 53 ]
  ! GT              [ shift and go to state 55 ]
  ! LT              [ shift and go to state 56 ]
  ! NE              [ shift and go to state 57 ]
  ! EQ              [ shift and go to state 58 ]
  ! LE              [ shift and go to state 59 ]
  ! GE              [ shift and go to state 60 ]

    relop                          shift and go to state 54

state 82

    (48) relopexp -> exp relop exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 48 (relopexp -> exp relop exp .)
    COLON           reduce using rule 48 (relopexp -> exp relop exp .)
    COMMA           reduce using rule 48 (relopexp -> exp relop exp .)
    RRB             reduce using rule 48 (relopexp -> exp relop exp .)
    SEMICOLON       reduce using rule 48 (relopexp -> exp relop exp .)
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! GT              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! LT              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! NE              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! EQ              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! LE              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! GE              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! AND             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! OR              [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! SUM             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! SUB             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! DIV             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! MUL             [ reduce using rule 48 (relopexp -> exp relop exp .) ]
  ! MOD             [ reduce using rule 48 (relopexp -> exp relop exp .) ]

    relop                          shift and go to state 54

state 83

    (49) relopexp -> relopexp relop exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for SUM resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GE resolved as shift
    RSB             reduce using rule 49 (relopexp -> relopexp relop exp .)
    COLON           reduce using rule 49 (relopexp -> relopexp relop exp .)
    COMMA           reduce using rule 49 (relopexp -> relopexp relop exp .)
    RRB             reduce using rule 49 (relopexp -> relopexp relop exp .)
    SEMICOLON       reduce using rule 49 (relopexp -> relopexp relop exp .)
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! GT              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! LT              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! NE              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! EQ              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! LE              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! GE              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! AND             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! OR              [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! SUM             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! SUB             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! DIV             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! MUL             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]
  ! MOD             [ reduce using rule 49 (relopexp -> relopexp relop exp .) ]

    relop                          shift and go to state 54

state 84

    (64) exp -> LRB exp RRB .

    RSB             reduce using rule 64 (exp -> LRB exp RRB .)
    AND             reduce using rule 64 (exp -> LRB exp RRB .)
    OR              reduce using rule 64 (exp -> LRB exp RRB .)
    SUM             reduce using rule 64 (exp -> LRB exp RRB .)
    SUB             reduce using rule 64 (exp -> LRB exp RRB .)
    DIV             reduce using rule 64 (exp -> LRB exp RRB .)
    MUL             reduce using rule 64 (exp -> LRB exp RRB .)
    MOD             reduce using rule 64 (exp -> LRB exp RRB .)
    GT              reduce using rule 64 (exp -> LRB exp RRB .)
    LT              reduce using rule 64 (exp -> LRB exp RRB .)
    NE              reduce using rule 64 (exp -> LRB exp RRB .)
    EQ              reduce using rule 64 (exp -> LRB exp RRB .)
    LE              reduce using rule 64 (exp -> LRB exp RRB .)
    GE              reduce using rule 64 (exp -> LRB exp RRB .)
    COLON           reduce using rule 64 (exp -> LRB exp RRB .)
    COMMA           reduce using rule 64 (exp -> LRB exp RRB .)
    RRB             reduce using rule 64 (exp -> LRB exp RRB .)
    SEMICOLON       reduce using rule 64 (exp -> LRB exp RRB .)


state 85

    (23) block -> LCB stmtlist RCB .

    $end            reduce using rule 23 (block -> LCB stmtlist RCB .)
    RCB             reduce using rule 23 (block -> LCB stmtlist RCB .)
    RETURN          reduce using rule 23 (block -> LCB stmtlist RCB .)
    WHILE           reduce using rule 23 (block -> LCB stmtlist RCB .)
    ON              reduce using rule 23 (block -> LCB stmtlist RCB .)
    FOR             reduce using rule 23 (block -> LCB stmtlist RCB .)
    IF              reduce using rule 23 (block -> LCB stmtlist RCB .)
    PRINT           reduce using rule 23 (block -> LCB stmtlist RCB .)
    ID              reduce using rule 23 (block -> LCB stmtlist RCB .)
    LRB             reduce using rule 23 (block -> LCB stmtlist RCB .)
    SUB             reduce using rule 23 (block -> LCB stmtlist RCB .)
    NOT             reduce using rule 23 (block -> LCB stmtlist RCB .)
    LCB             reduce using rule 23 (block -> LCB stmtlist RCB .)
    INTEGERNUMBER   reduce using rule 23 (block -> LCB stmtlist RCB .)
    FLOATNUMBER     reduce using rule 23 (block -> LCB stmtlist RCB .)
    TRUE            reduce using rule 23 (block -> LCB stmtlist RCB .)
    FALSE           reduce using rule 23 (block -> LCB stmtlist RCB .)
    MAIN            reduce using rule 23 (block -> LCB stmtlist RCB .)
    FUNCTION        reduce using rule 23 (block -> LCB stmtlist RCB .)
    ELSE            reduce using rule 23 (block -> LCB stmtlist RCB .)
    ELSEIF          reduce using rule 23 (block -> LCB stmtlist RCB .)
    WHERE           reduce using rule 23 (block -> LCB stmtlist RCB .)


state 86

    (24) stmtlist -> stmtlist stmt .

    RCB             reduce using rule 24 (stmtlist -> stmtlist stmt .)
    RETURN          reduce using rule 24 (stmtlist -> stmtlist stmt .)
    WHILE           reduce using rule 24 (stmtlist -> stmtlist stmt .)
    ON              reduce using rule 24 (stmtlist -> stmtlist stmt .)
    FOR             reduce using rule 24 (stmtlist -> stmtlist stmt .)
    IF              reduce using rule 24 (stmtlist -> stmtlist stmt .)
    PRINT           reduce using rule 24 (stmtlist -> stmtlist stmt .)
    ID              reduce using rule 24 (stmtlist -> stmtlist stmt .)
    LRB             reduce using rule 24 (stmtlist -> stmtlist stmt .)
    SUB             reduce using rule 24 (stmtlist -> stmtlist stmt .)
    NOT             reduce using rule 24 (stmtlist -> stmtlist stmt .)
    LCB             reduce using rule 24 (stmtlist -> stmtlist stmt .)
    INTEGERNUMBER   reduce using rule 24 (stmtlist -> stmtlist stmt .)
    FLOATNUMBER     reduce using rule 24 (stmtlist -> stmtlist stmt .)
    TRUE            reduce using rule 24 (stmtlist -> stmtlist stmt .)
    FALSE           reduce using rule 24 (stmtlist -> stmtlist stmt .)
    WHERE           reduce using rule 24 (stmtlist -> stmtlist stmt .)


state 87

    (29) stmt -> RETURN . exp SEMICOLON
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 105
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 88

    (30) stmt -> exp . SEMICOLON
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    SEMICOLON       shift and go to state 106
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 89

    (31) stmt -> block .

    RCB             reduce using rule 31 (stmt -> block .)
    RETURN          reduce using rule 31 (stmt -> block .)
    WHILE           reduce using rule 31 (stmt -> block .)
    ON              reduce using rule 31 (stmt -> block .)
    FOR             reduce using rule 31 (stmt -> block .)
    IF              reduce using rule 31 (stmt -> block .)
    PRINT           reduce using rule 31 (stmt -> block .)
    ID              reduce using rule 31 (stmt -> block .)
    LRB             reduce using rule 31 (stmt -> block .)
    SUB             reduce using rule 31 (stmt -> block .)
    NOT             reduce using rule 31 (stmt -> block .)
    LCB             reduce using rule 31 (stmt -> block .)
    INTEGERNUMBER   reduce using rule 31 (stmt -> block .)
    FLOATNUMBER     reduce using rule 31 (stmt -> block .)
    TRUE            reduce using rule 31 (stmt -> block .)
    FALSE           reduce using rule 31 (stmt -> block .)
    ELSE            reduce using rule 31 (stmt -> block .)
    ELSEIF          reduce using rule 31 (stmt -> block .)
    WHERE           reduce using rule 31 (stmt -> block .)


state 90

    (32) stmt -> vardec .

    RCB             reduce using rule 32 (stmt -> vardec .)
    RETURN          reduce using rule 32 (stmt -> vardec .)
    WHILE           reduce using rule 32 (stmt -> vardec .)
    ON              reduce using rule 32 (stmt -> vardec .)
    FOR             reduce using rule 32 (stmt -> vardec .)
    IF              reduce using rule 32 (stmt -> vardec .)
    PRINT           reduce using rule 32 (stmt -> vardec .)
    ID              reduce using rule 32 (stmt -> vardec .)
    LRB             reduce using rule 32 (stmt -> vardec .)
    SUB             reduce using rule 32 (stmt -> vardec .)
    NOT             reduce using rule 32 (stmt -> vardec .)
    LCB             reduce using rule 32 (stmt -> vardec .)
    INTEGERNUMBER   reduce using rule 32 (stmt -> vardec .)
    FLOATNUMBER     reduce using rule 32 (stmt -> vardec .)
    TRUE            reduce using rule 32 (stmt -> vardec .)
    FALSE           reduce using rule 32 (stmt -> vardec .)
    ELSE            reduce using rule 32 (stmt -> vardec .)
    ELSEIF          reduce using rule 32 (stmt -> vardec .)
    WHERE           reduce using rule 32 (stmt -> vardec .)


state 91

    (33) stmt -> WHILE . LRB exp RRB stmt

    LRB             shift and go to state 107


state 92

    (34) stmt -> ON . LRB exp RRB LCB cases RCB SEMICOLON

    LRB             shift and go to state 108


state 93

    (35) stmt -> FOR . LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (36) stmt -> FOR . LRB ID IN ID RRB stmt

    LRB             shift and go to state 109


state 94

    (50) exp -> ID . ASSIGN exp
    (51) exp -> ID . LSB exp RSB ASSIGN exp
    (61) exp -> ID . LSB exp RSB
    (62) exp -> ID .
    (63) exp -> ID . LRB explist RRB
    (65) exp -> ID . LRB RRB
    (9) iddec -> ID .
    (10) iddec -> ID . LSB exp RSB
    (11) iddec -> ID . ASSIGN exp

    ASSIGN          shift and go to state 110
    LSB             shift and go to state 111
    SEMICOLON       reduce using rule 62 (exp -> ID .)
    AND             reduce using rule 62 (exp -> ID .)
    OR              reduce using rule 62 (exp -> ID .)
    SUM             reduce using rule 62 (exp -> ID .)
    SUB             reduce using rule 62 (exp -> ID .)
    DIV             reduce using rule 62 (exp -> ID .)
    MUL             reduce using rule 62 (exp -> ID .)
    MOD             reduce using rule 62 (exp -> ID .)
    GT              reduce using rule 62 (exp -> ID .)
    LT              reduce using rule 62 (exp -> ID .)
    NE              reduce using rule 62 (exp -> ID .)
    EQ              reduce using rule 62 (exp -> ID .)
    LE              reduce using rule 62 (exp -> ID .)
    GE              reduce using rule 62 (exp -> ID .)
    LRB             shift and go to state 45
    COLON           reduce using rule 9 (iddec -> ID .)
    COMMA           reduce using rule 9 (iddec -> ID .)


state 95

    (37) stmt -> IF . LRB exp RRB stmt elseiflist
    (38) stmt -> IF . LRB exp RRB stmt elseiflist ELSE stmt

    LRB             shift and go to state 112


state 96

    (39) stmt -> PRINT . LRB ID RRB SEMICOLON

    LRB             shift and go to state 113


state 97

    (21) paramdec -> ID COLON type .

    COMMA           reduce using rule 21 (paramdec -> ID COLON type .)
    RRB             reduce using rule 21 (paramdec -> ID COLON type .)


state 98

    (22) paramdec -> ID LSB RSB . COLON type

    COLON           shift and go to state 114


state 99

    (15) funcdec -> FUNCTION ID LRB paramdecs RRB COLON . type block
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21

    type                           shift and go to state 115

state 100

    (16) funcdec -> FUNCTION ID LRB paramdecs RRB block .

    MAIN            reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    FUNCTION        reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)
    ID              reduce using rule 16 (funcdec -> FUNCTION ID LRB paramdecs RRB block .)


state 101

    (20) paramdecslist -> paramdecslist COMMA paramdec .

    COMMA           reduce using rule 20 (paramdecslist -> paramdecslist COMMA paramdec .)
    RRB             reduce using rule 20 (paramdecslist -> paramdecslist COMMA paramdec .)


state 102

    (51) exp -> ID LSB exp RSB . ASSIGN exp
    (61) exp -> ID LSB exp RSB .

    ASSIGN          shift and go to state 116
    RSB             reduce using rule 61 (exp -> ID LSB exp RSB .)
    AND             reduce using rule 61 (exp -> ID LSB exp RSB .)
    OR              reduce using rule 61 (exp -> ID LSB exp RSB .)
    SUM             reduce using rule 61 (exp -> ID LSB exp RSB .)
    SUB             reduce using rule 61 (exp -> ID LSB exp RSB .)
    DIV             reduce using rule 61 (exp -> ID LSB exp RSB .)
    MUL             reduce using rule 61 (exp -> ID LSB exp RSB .)
    MOD             reduce using rule 61 (exp -> ID LSB exp RSB .)
    GT              reduce using rule 61 (exp -> ID LSB exp RSB .)
    LT              reduce using rule 61 (exp -> ID LSB exp RSB .)
    NE              reduce using rule 61 (exp -> ID LSB exp RSB .)
    EQ              reduce using rule 61 (exp -> ID LSB exp RSB .)
    LE              reduce using rule 61 (exp -> ID LSB exp RSB .)
    GE              reduce using rule 61 (exp -> ID LSB exp RSB .)
    COLON           reduce using rule 61 (exp -> ID LSB exp RSB .)
    COMMA           reduce using rule 61 (exp -> ID LSB exp RSB .)
    RRB             reduce using rule 61 (exp -> ID LSB exp RSB .)
    SEMICOLON       reduce using rule 61 (exp -> ID LSB exp RSB .)


state 103

    (63) exp -> ID LRB explist RRB .

    RSB             reduce using rule 63 (exp -> ID LRB explist RRB .)
    AND             reduce using rule 63 (exp -> ID LRB explist RRB .)
    OR              reduce using rule 63 (exp -> ID LRB explist RRB .)
    SUM             reduce using rule 63 (exp -> ID LRB explist RRB .)
    SUB             reduce using rule 63 (exp -> ID LRB explist RRB .)
    DIV             reduce using rule 63 (exp -> ID LRB explist RRB .)
    MUL             reduce using rule 63 (exp -> ID LRB explist RRB .)
    MOD             reduce using rule 63 (exp -> ID LRB explist RRB .)
    GT              reduce using rule 63 (exp -> ID LRB explist RRB .)
    LT              reduce using rule 63 (exp -> ID LRB explist RRB .)
    NE              reduce using rule 63 (exp -> ID LRB explist RRB .)
    EQ              reduce using rule 63 (exp -> ID LRB explist RRB .)
    LE              reduce using rule 63 (exp -> ID LRB explist RRB .)
    GE              reduce using rule 63 (exp -> ID LRB explist RRB .)
    COLON           reduce using rule 63 (exp -> ID LRB explist RRB .)
    COMMA           reduce using rule 63 (exp -> ID LRB explist RRB .)
    RRB             reduce using rule 63 (exp -> ID LRB explist RRB .)
    SEMICOLON       reduce using rule 63 (exp -> ID LRB explist RRB .)


state 104

    (73) explist -> explist COMMA . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 117
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 105

    (29) stmt -> RETURN exp . SEMICOLON
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    SEMICOLON       shift and go to state 118
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 106

    (30) stmt -> exp SEMICOLON .

    RCB             reduce using rule 30 (stmt -> exp SEMICOLON .)
    RETURN          reduce using rule 30 (stmt -> exp SEMICOLON .)
    WHILE           reduce using rule 30 (stmt -> exp SEMICOLON .)
    ON              reduce using rule 30 (stmt -> exp SEMICOLON .)
    FOR             reduce using rule 30 (stmt -> exp SEMICOLON .)
    IF              reduce using rule 30 (stmt -> exp SEMICOLON .)
    PRINT           reduce using rule 30 (stmt -> exp SEMICOLON .)
    ID              reduce using rule 30 (stmt -> exp SEMICOLON .)
    LRB             reduce using rule 30 (stmt -> exp SEMICOLON .)
    SUB             reduce using rule 30 (stmt -> exp SEMICOLON .)
    NOT             reduce using rule 30 (stmt -> exp SEMICOLON .)
    LCB             reduce using rule 30 (stmt -> exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 30 (stmt -> exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 30 (stmt -> exp SEMICOLON .)
    TRUE            reduce using rule 30 (stmt -> exp SEMICOLON .)
    FALSE           reduce using rule 30 (stmt -> exp SEMICOLON .)
    ELSE            reduce using rule 30 (stmt -> exp SEMICOLON .)
    ELSEIF          reduce using rule 30 (stmt -> exp SEMICOLON .)
    WHERE           reduce using rule 30 (stmt -> exp SEMICOLON .)


state 107

    (33) stmt -> WHILE LRB . exp RRB stmt
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 119
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 108

    (34) stmt -> ON LRB . exp RRB LCB cases RCB SEMICOLON
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 120
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 109

    (35) stmt -> FOR LRB . exp SEMICOLON exp SEMICOLON exp RRB stmt
    (36) stmt -> FOR LRB . ID IN ID RRB stmt
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 122
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 121
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 110

    (50) exp -> ID ASSIGN . exp
    (11) iddec -> ID ASSIGN . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 123
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 111

    (51) exp -> ID LSB . exp RSB ASSIGN exp
    (61) exp -> ID LSB . exp RSB
    (10) iddec -> ID LSB . exp RSB
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 124
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 112

    (37) stmt -> IF LRB . exp RRB stmt elseiflist
    (38) stmt -> IF LRB . exp RRB stmt elseiflist ELSE stmt
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 125
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 113

    (39) stmt -> PRINT LRB . ID RRB SEMICOLON

    ID              shift and go to state 126


state 114

    (22) paramdec -> ID LSB RSB COLON . type
    (6) type -> . INTEGER
    (7) type -> . FLOAT
    (8) type -> . BOOLEAN

    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 20
    BOOLEAN         shift and go to state 21

    type                           shift and go to state 127

state 115

    (15) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type . block
    (23) block -> . LCB stmtlist RCB

    LCB             shift and go to state 37

    block                          shift and go to state 128

state 116

    (51) exp -> ID LSB exp RSB ASSIGN . exp
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 129
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 117

    (73) explist -> explist COMMA exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RRB             reduce using rule 73 (explist -> explist COMMA exp .)
    COMMA           reduce using rule 73 (explist -> explist COMMA exp .)
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 118

    (29) stmt -> RETURN exp SEMICOLON .

    RCB             reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    RETURN          reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    WHILE           reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    ON              reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    FOR             reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    IF              reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    PRINT           reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    ID              reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    LRB             reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    SUB             reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    NOT             reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    LCB             reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    INTEGERNUMBER   reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    FLOATNUMBER     reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    TRUE            reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    FALSE           reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    ELSE            reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    ELSEIF          reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)
    WHERE           reduce using rule 29 (stmt -> RETURN exp SEMICOLON .)


state 119

    (33) stmt -> WHILE LRB exp . RRB stmt
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RRB             shift and go to state 130
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 120

    (34) stmt -> ON LRB exp . RRB LCB cases RCB SEMICOLON
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RRB             shift and go to state 131
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 121

    (35) stmt -> FOR LRB exp . SEMICOLON exp SEMICOLON exp RRB stmt
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    SEMICOLON       shift and go to state 132
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 122

    (36) stmt -> FOR LRB ID . IN ID RRB stmt
    (50) exp -> ID . ASSIGN exp
    (51) exp -> ID . LSB exp RSB ASSIGN exp
    (61) exp -> ID . LSB exp RSB
    (62) exp -> ID .
    (63) exp -> ID . LRB explist RRB
    (65) exp -> ID . LRB RRB

    IN              shift and go to state 133
    ASSIGN          shift and go to state 43
    LSB             shift and go to state 44
    SEMICOLON       reduce using rule 62 (exp -> ID .)
    AND             reduce using rule 62 (exp -> ID .)
    OR              reduce using rule 62 (exp -> ID .)
    SUM             reduce using rule 62 (exp -> ID .)
    SUB             reduce using rule 62 (exp -> ID .)
    DIV             reduce using rule 62 (exp -> ID .)
    MUL             reduce using rule 62 (exp -> ID .)
    MOD             reduce using rule 62 (exp -> ID .)
    GT              reduce using rule 62 (exp -> ID .)
    LT              reduce using rule 62 (exp -> ID .)
    NE              reduce using rule 62 (exp -> ID .)
    EQ              reduce using rule 62 (exp -> ID .)
    LE              reduce using rule 62 (exp -> ID .)
    GE              reduce using rule 62 (exp -> ID .)
    LRB             shift and go to state 45


state 123

    (50) exp -> ID ASSIGN exp .
    (11) iddec -> ID ASSIGN exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    SEMICOLON       reduce using rule 50 (exp -> ID ASSIGN exp .)
    COLON           reduce using rule 11 (iddec -> ID ASSIGN exp .)
    COMMA           reduce using rule 11 (iddec -> ID ASSIGN exp .)
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! AND             [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! OR              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! SUM             [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! SUB             [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! DIV             [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! MUL             [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! MOD             [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! GT              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! LT              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! NE              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! EQ              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! LE              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]
  ! GE              [ reduce using rule 50 (exp -> ID ASSIGN exp .) ]

    relop                          shift and go to state 54

state 124

    (51) exp -> ID LSB exp . RSB ASSIGN exp
    (61) exp -> ID LSB exp . RSB
    (10) iddec -> ID LSB exp . RSB
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             shift and go to state 134
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 125

    (37) stmt -> IF LRB exp . RRB stmt elseiflist
    (38) stmt -> IF LRB exp . RRB stmt elseiflist ELSE stmt
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RRB             shift and go to state 135
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 126

    (39) stmt -> PRINT LRB ID . RRB SEMICOLON

    RRB             shift and go to state 136


state 127

    (22) paramdec -> ID LSB RSB COLON type .

    COMMA           reduce using rule 22 (paramdec -> ID LSB RSB COLON type .)
    RRB             reduce using rule 22 (paramdec -> ID LSB RSB COLON type .)


state 128

    (15) funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .

    MAIN            reduce using rule 15 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    FUNCTION        reduce using rule 15 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)
    ID              reduce using rule 15 (funcdec -> FUNCTION ID LRB paramdecs RRB COLON type block .)


state 129

    (51) exp -> ID LSB exp RSB ASSIGN exp .
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RSB             reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .)
    COLON           reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .)
    COMMA           reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .)
    RRB             reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .)
    SEMICOLON       reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .)
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

  ! AND             [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! OR              [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! SUM             [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! SUB             [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! DIV             [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! MUL             [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! MOD             [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! GT              [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! LT              [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! NE              [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! EQ              [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! LE              [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]
  ! GE              [ reduce using rule 51 (exp -> ID LSB exp RSB ASSIGN exp .) ]

    relop                          shift and go to state 54

state 130

    (33) stmt -> WHILE LRB exp RRB . stmt
    (29) stmt -> . RETURN exp SEMICOLON
    (30) stmt -> . exp SEMICOLON
    (31) stmt -> . block
    (32) stmt -> . vardec
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (35) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (36) stmt -> . FOR LRB ID IN ID RRB stmt
    (37) stmt -> . IF LRB exp RRB stmt elseiflist
    (38) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (39) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 87
    WHILE           shift and go to state 91
    ON              shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 94
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    LCB             shift and go to state 37
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 88
    stmt                           shift and go to state 137
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    relopexp                       shift and go to state 27
    const                          shift and go to state 28
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 131

    (34) stmt -> ON LRB exp RRB . LCB cases RCB SEMICOLON

    LCB             shift and go to state 138


state 132

    (35) stmt -> FOR LRB exp SEMICOLON . exp SEMICOLON exp RRB stmt
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 139
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 133

    (36) stmt -> FOR LRB ID IN . ID RRB stmt

    ID              shift and go to state 140


state 134

    (51) exp -> ID LSB exp RSB . ASSIGN exp
    (61) exp -> ID LSB exp RSB .
    (10) iddec -> ID LSB exp RSB .

    ASSIGN          shift and go to state 116
    SEMICOLON       reduce using rule 61 (exp -> ID LSB exp RSB .)
    AND             reduce using rule 61 (exp -> ID LSB exp RSB .)
    OR              reduce using rule 61 (exp -> ID LSB exp RSB .)
    SUM             reduce using rule 61 (exp -> ID LSB exp RSB .)
    SUB             reduce using rule 61 (exp -> ID LSB exp RSB .)
    DIV             reduce using rule 61 (exp -> ID LSB exp RSB .)
    MUL             reduce using rule 61 (exp -> ID LSB exp RSB .)
    MOD             reduce using rule 61 (exp -> ID LSB exp RSB .)
    GT              reduce using rule 61 (exp -> ID LSB exp RSB .)
    LT              reduce using rule 61 (exp -> ID LSB exp RSB .)
    NE              reduce using rule 61 (exp -> ID LSB exp RSB .)
    EQ              reduce using rule 61 (exp -> ID LSB exp RSB .)
    LE              reduce using rule 61 (exp -> ID LSB exp RSB .)
    GE              reduce using rule 61 (exp -> ID LSB exp RSB .)
    COLON           reduce using rule 10 (iddec -> ID LSB exp RSB .)
    COMMA           reduce using rule 10 (iddec -> ID LSB exp RSB .)


state 135

    (37) stmt -> IF LRB exp RRB . stmt elseiflist
    (38) stmt -> IF LRB exp RRB . stmt elseiflist ELSE stmt
    (29) stmt -> . RETURN exp SEMICOLON
    (30) stmt -> . exp SEMICOLON
    (31) stmt -> . block
    (32) stmt -> . vardec
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (35) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (36) stmt -> . FOR LRB ID IN ID RRB stmt
    (37) stmt -> . IF LRB exp RRB stmt elseiflist
    (38) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (39) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 87
    WHILE           shift and go to state 91
    ON              shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 94
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    LCB             shift and go to state 37
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 88
    stmt                           shift and go to state 141
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    relopexp                       shift and go to state 27
    const                          shift and go to state 28
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 136

    (39) stmt -> PRINT LRB ID RRB . SEMICOLON

    SEMICOLON       shift and go to state 142


state 137

    (33) stmt -> WHILE LRB exp RRB stmt .

    RCB             reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    RETURN          reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    WHILE           reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    ON              reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    FOR             reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    IF              reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    PRINT           reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    ID              reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    LRB             reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    SUB             reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    NOT             reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    LCB             reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    TRUE            reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    FALSE           reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    ELSE            reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    ELSEIF          reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)
    WHERE           reduce using rule 33 (stmt -> WHILE LRB exp RRB stmt .)


state 138

    (34) stmt -> ON LRB exp RRB LCB . cases RCB SEMICOLON
    (27) cases -> . cases case
    (28) cases -> .

    RCB             reduce using rule 28 (cases -> .)
    WHERE           reduce using rule 28 (cases -> .)

    cases                          shift and go to state 143

state 139

    (35) stmt -> FOR LRB exp SEMICOLON exp . SEMICOLON exp RRB stmt
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    SEMICOLON       shift and go to state 144
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 140

    (36) stmt -> FOR LRB ID IN ID . RRB stmt

    RRB             shift and go to state 145


state 141

    (37) stmt -> IF LRB exp RRB stmt . elseiflist
    (38) stmt -> IF LRB exp RRB stmt . elseiflist ELSE stmt
    (40) elseiflist -> . elseiflist ELSEIF LRB exp RRB stmt
    (41) elseiflist -> .

    RCB             reduce using rule 41 (elseiflist -> .)
    RETURN          reduce using rule 41 (elseiflist -> .)
    WHILE           reduce using rule 41 (elseiflist -> .)
    ON              reduce using rule 41 (elseiflist -> .)
    FOR             reduce using rule 41 (elseiflist -> .)
    IF              reduce using rule 41 (elseiflist -> .)
    PRINT           reduce using rule 41 (elseiflist -> .)
    ID              reduce using rule 41 (elseiflist -> .)
    LRB             reduce using rule 41 (elseiflist -> .)
    SUB             reduce using rule 41 (elseiflist -> .)
    NOT             reduce using rule 41 (elseiflist -> .)
    LCB             reduce using rule 41 (elseiflist -> .)
    INTEGERNUMBER   reduce using rule 41 (elseiflist -> .)
    FLOATNUMBER     reduce using rule 41 (elseiflist -> .)
    TRUE            reduce using rule 41 (elseiflist -> .)
    FALSE           reduce using rule 41 (elseiflist -> .)
    ELSE            reduce using rule 41 (elseiflist -> .)
    ELSEIF          reduce using rule 41 (elseiflist -> .)
    WHERE           reduce using rule 41 (elseiflist -> .)

    elseiflist                     shift and go to state 146

state 142

    (39) stmt -> PRINT LRB ID RRB SEMICOLON .

    RCB             reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    RETURN          reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHILE           reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ON              reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FOR             reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    IF              reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    PRINT           reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ID              reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LRB             reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    SUB             reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    NOT             reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    LCB             reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FLOATNUMBER     reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    TRUE            reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    FALSE           reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSE            reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    ELSEIF          reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)
    WHERE           reduce using rule 39 (stmt -> PRINT LRB ID RRB SEMICOLON .)


state 143

    (34) stmt -> ON LRB exp RRB LCB cases . RCB SEMICOLON
    (27) cases -> cases . case
    (26) case -> . WHERE const COLON stmtlist

    RCB             shift and go to state 147
    WHERE           shift and go to state 149

    case                           shift and go to state 148

state 144

    (35) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON . exp RRB stmt
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 150
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 145

    (36) stmt -> FOR LRB ID IN ID RRB . stmt
    (29) stmt -> . RETURN exp SEMICOLON
    (30) stmt -> . exp SEMICOLON
    (31) stmt -> . block
    (32) stmt -> . vardec
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (35) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (36) stmt -> . FOR LRB ID IN ID RRB stmt
    (37) stmt -> . IF LRB exp RRB stmt elseiflist
    (38) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (39) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 87
    WHILE           shift and go to state 91
    ON              shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 94
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    LCB             shift and go to state 37
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    stmt                           shift and go to state 151
    exp                            shift and go to state 88
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    relopexp                       shift and go to state 27
    const                          shift and go to state 28
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 146

    (37) stmt -> IF LRB exp RRB stmt elseiflist .
    (38) stmt -> IF LRB exp RRB stmt elseiflist . ELSE stmt
    (40) elseiflist -> elseiflist . ELSEIF LRB exp RRB stmt

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    RCB             reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    RETURN          reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHILE           reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ON              reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FOR             reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    IF              reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    PRINT           reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ID              reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LRB             reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    SUB             reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    NOT             reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    LCB             reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    INTEGERNUMBER   reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FLOATNUMBER     reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    TRUE            reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    FALSE           reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    WHERE           reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .)
    ELSE            shift and go to state 152
    ELSEIF          shift and go to state 153

  ! ELSE            [ reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .) ]
  ! ELSEIF          [ reduce using rule 37 (stmt -> IF LRB exp RRB stmt elseiflist .) ]


state 147

    (34) stmt -> ON LRB exp RRB LCB cases RCB . SEMICOLON

    SEMICOLON       shift and go to state 154


state 148

    (27) cases -> cases case .

    RCB             reduce using rule 27 (cases -> cases case .)
    WHERE           reduce using rule 27 (cases -> cases case .)


state 149

    (26) case -> WHERE . const COLON stmtlist
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    const                          shift and go to state 155

state 150

    (35) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp . RRB stmt
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RRB             shift and go to state 156
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 151

    (36) stmt -> FOR LRB ID IN ID RRB stmt .

    RCB             reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    RETURN          reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHILE           reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ON              reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FOR             reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    IF              reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    PRINT           reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ID              reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LRB             reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    SUB             reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    NOT             reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    LCB             reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    INTEGERNUMBER   reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FLOATNUMBER     reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    TRUE            reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    FALSE           reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSE            reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    ELSEIF          reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)
    WHERE           reduce using rule 36 (stmt -> FOR LRB ID IN ID RRB stmt .)


state 152

    (38) stmt -> IF LRB exp RRB stmt elseiflist ELSE . stmt
    (29) stmt -> . RETURN exp SEMICOLON
    (30) stmt -> . exp SEMICOLON
    (31) stmt -> . block
    (32) stmt -> . vardec
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (35) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (36) stmt -> . FOR LRB ID IN ID RRB stmt
    (37) stmt -> . IF LRB exp RRB stmt elseiflist
    (38) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (39) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 87
    WHILE           shift and go to state 91
    ON              shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 94
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    LCB             shift and go to state 37
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 88
    stmt                           shift and go to state 157
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    relopexp                       shift and go to state 27
    const                          shift and go to state 28
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 153

    (40) elseiflist -> elseiflist ELSEIF . LRB exp RRB stmt

    LRB             shift and go to state 158


state 154

    (34) stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .

    RCB             reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    RETURN          reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHILE           reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ON              reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FOR             reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    IF              reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    PRINT           reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ID              reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LRB             reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    SUB             reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    NOT             reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    LCB             reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    INTEGERNUMBER   reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FLOATNUMBER     reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    TRUE            reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    FALSE           reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSE            reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    ELSEIF          reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)
    WHERE           reduce using rule 34 (stmt -> ON LRB exp RRB LCB cases RCB SEMICOLON .)


state 155

    (26) case -> WHERE const . COLON stmtlist

    COLON           shift and go to state 159


state 156

    (35) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB . stmt
    (29) stmt -> . RETURN exp SEMICOLON
    (30) stmt -> . exp SEMICOLON
    (31) stmt -> . block
    (32) stmt -> . vardec
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (35) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (36) stmt -> . FOR LRB ID IN ID RRB stmt
    (37) stmt -> . IF LRB exp RRB stmt elseiflist
    (38) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (39) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 87
    WHILE           shift and go to state 91
    ON              shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 94
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    LCB             shift and go to state 37
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 88
    stmt                           shift and go to state 160
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    relopexp                       shift and go to state 27
    const                          shift and go to state 28
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 157

    (38) stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .

    RCB             reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    RETURN          reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHILE           reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ON              reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FOR             reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    IF              reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    PRINT           reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ID              reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LRB             reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    SUB             reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    NOT             reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    LCB             reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    INTEGERNUMBER   reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FLOATNUMBER     reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    TRUE            reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    FALSE           reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSE            reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    ELSEIF          reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)
    WHERE           reduce using rule 38 (stmt -> IF LRB exp RRB stmt elseiflist ELSE stmt .)


state 158

    (40) elseiflist -> elseiflist ELSEIF LRB . exp RRB stmt
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE

    ID              shift and go to state 24
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 161
    relopexp                       shift and go to state 27
    const                          shift and go to state 28

state 159

    (26) case -> WHERE const COLON . stmtlist
    (24) stmtlist -> . stmtlist stmt
    (25) stmtlist -> .

    RETURN          reduce using rule 25 (stmtlist -> .)
    WHILE           reduce using rule 25 (stmtlist -> .)
    ON              reduce using rule 25 (stmtlist -> .)
    FOR             reduce using rule 25 (stmtlist -> .)
    IF              reduce using rule 25 (stmtlist -> .)
    PRINT           reduce using rule 25 (stmtlist -> .)
    ID              reduce using rule 25 (stmtlist -> .)
    LRB             reduce using rule 25 (stmtlist -> .)
    SUB             reduce using rule 25 (stmtlist -> .)
    NOT             reduce using rule 25 (stmtlist -> .)
    LCB             reduce using rule 25 (stmtlist -> .)
    INTEGERNUMBER   reduce using rule 25 (stmtlist -> .)
    FLOATNUMBER     reduce using rule 25 (stmtlist -> .)
    TRUE            reduce using rule 25 (stmtlist -> .)
    FALSE           reduce using rule 25 (stmtlist -> .)
    RCB             reduce using rule 25 (stmtlist -> .)
    WHERE           reduce using rule 25 (stmtlist -> .)

    stmtlist                       shift and go to state 162

state 160

    (35) stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .

    RCB             reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    RETURN          reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHILE           reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ON              reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FOR             reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    IF              reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    PRINT           reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ID              reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LRB             reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    SUB             reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    NOT             reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    LCB             reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FLOATNUMBER     reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    TRUE            reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    FALSE           reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSE            reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    ELSEIF          reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)
    WHERE           reduce using rule 35 (stmt -> FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt .)


state 161

    (40) elseiflist -> elseiflist ELSEIF LRB exp . RRB stmt
    (52) exp -> exp . AND exp
    (53) exp -> exp . OR exp
    (54) exp -> exp . SUM exp
    (55) exp -> exp . SUB exp
    (56) exp -> exp . DIV exp
    (57) exp -> exp . MUL exp
    (58) exp -> exp . MOD exp
    (48) relopexp -> exp . relop exp
    (42) relop -> . GT
    (43) relop -> . LT
    (44) relop -> . NE
    (45) relop -> . EQ
    (46) relop -> . LE
    (47) relop -> . GE

    RRB             shift and go to state 163
    AND             shift and go to state 47
    OR              shift and go to state 48
    SUM             shift and go to state 49
    SUB             shift and go to state 50
    DIV             shift and go to state 51
    MUL             shift and go to state 52
    MOD             shift and go to state 53
    GT              shift and go to state 55
    LT              shift and go to state 56
    NE              shift and go to state 57
    EQ              shift and go to state 58
    LE              shift and go to state 59
    GE              shift and go to state 60

    relop                          shift and go to state 54

state 162

    (26) case -> WHERE const COLON stmtlist .
    (24) stmtlist -> stmtlist . stmt
    (29) stmt -> . RETURN exp SEMICOLON
    (30) stmt -> . exp SEMICOLON
    (31) stmt -> . block
    (32) stmt -> . vardec
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (35) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (36) stmt -> . FOR LRB ID IN ID RRB stmt
    (37) stmt -> . IF LRB exp RRB stmt elseiflist
    (38) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (39) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    RCB             reduce using rule 26 (case -> WHERE const COLON stmtlist .)
    WHERE           reduce using rule 26 (case -> WHERE const COLON stmtlist .)
    RETURN          shift and go to state 87
    WHILE           shift and go to state 91
    ON              shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 94
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    LCB             shift and go to state 37
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    const                          shift and go to state 28
    stmt                           shift and go to state 86
    exp                            shift and go to state 88
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    relopexp                       shift and go to state 27
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 163

    (40) elseiflist -> elseiflist ELSEIF LRB exp RRB . stmt
    (29) stmt -> . RETURN exp SEMICOLON
    (30) stmt -> . exp SEMICOLON
    (31) stmt -> . block
    (32) stmt -> . vardec
    (33) stmt -> . WHILE LRB exp RRB stmt
    (34) stmt -> . ON LRB exp RRB LCB cases RCB SEMICOLON
    (35) stmt -> . FOR LRB exp SEMICOLON exp SEMICOLON exp RRB stmt
    (36) stmt -> . FOR LRB ID IN ID RRB stmt
    (37) stmt -> . IF LRB exp RRB stmt elseiflist
    (38) stmt -> . IF LRB exp RRB stmt elseiflist ELSE stmt
    (39) stmt -> . PRINT LRB ID RRB SEMICOLON
    (50) exp -> . ID ASSIGN exp
    (51) exp -> . ID LSB exp RSB ASSIGN exp
    (52) exp -> . exp AND exp
    (53) exp -> . exp OR exp
    (54) exp -> . exp SUM exp
    (55) exp -> . exp SUB exp
    (56) exp -> . exp DIV exp
    (57) exp -> . exp MUL exp
    (58) exp -> . exp MOD exp
    (59) exp -> . relopexp
    (60) exp -> . const
    (61) exp -> . ID LSB exp RSB
    (62) exp -> . ID
    (63) exp -> . ID LRB explist RRB
    (64) exp -> . LRB exp RRB
    (65) exp -> . ID LRB RRB
    (66) exp -> . SUB exp
    (67) exp -> . NOT exp
    (23) block -> . LCB stmtlist RCB
    (14) vardec -> . idlist COLON type SEMICOLON
    (48) relopexp -> . exp relop exp
    (49) relopexp -> . relopexp relop exp
    (68) const -> . INTEGERNUMBER
    (69) const -> . FLOATNUMBER
    (70) const -> . TRUE
    (71) const -> . FALSE
    (12) idlist -> . iddec
    (13) idlist -> . idlist COMMA iddec
    (9) iddec -> . ID
    (10) iddec -> . ID LSB exp RSB
    (11) iddec -> . ID ASSIGN exp

    RETURN          shift and go to state 87
    WHILE           shift and go to state 91
    ON              shift and go to state 92
    FOR             shift and go to state 93
    IF              shift and go to state 95
    PRINT           shift and go to state 96
    ID              shift and go to state 94
    LRB             shift and go to state 29
    SUB             shift and go to state 26
    NOT             shift and go to state 30
    LCB             shift and go to state 37
    INTEGERNUMBER   shift and go to state 31
    FLOATNUMBER     shift and go to state 32
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    exp                            shift and go to state 88
    stmt                           shift and go to state 164
    block                          shift and go to state 89
    vardec                         shift and go to state 90
    relopexp                       shift and go to state 27
    const                          shift and go to state 28
    idlist                         shift and go to state 7
    iddec                          shift and go to state 10

state 164

    (40) elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .

    RCB             reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    RETURN          reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHILE           reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ON              reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FOR             reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    IF              reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    PRINT           reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ID              reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LRB             reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    SUB             reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    NOT             reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    LCB             reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    INTEGERNUMBER   reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FLOATNUMBER     reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    TRUE            reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    FALSE           reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSE            reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    ELSEIF          reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)
    WHERE           reduce using rule 40 (elseiflist -> elseiflist ELSEIF LRB exp RRB stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for GT in state 27 resolved as shift
WARNING: shift/reduce conflict for LT in state 27 resolved as shift
WARNING: shift/reduce conflict for NE in state 27 resolved as shift
WARNING: shift/reduce conflict for EQ in state 27 resolved as shift
WARNING: shift/reduce conflict for LE in state 27 resolved as shift
WARNING: shift/reduce conflict for GE in state 27 resolved as shift
WARNING: shift/reduce conflict for AND in state 82 resolved as shift
WARNING: shift/reduce conflict for OR in state 82 resolved as shift
WARNING: shift/reduce conflict for SUM in state 82 resolved as shift
WARNING: shift/reduce conflict for SUB in state 82 resolved as shift
WARNING: shift/reduce conflict for DIV in state 82 resolved as shift
WARNING: shift/reduce conflict for MUL in state 82 resolved as shift
WARNING: shift/reduce conflict for MOD in state 82 resolved as shift
WARNING: shift/reduce conflict for GT in state 82 resolved as shift
WARNING: shift/reduce conflict for LT in state 82 resolved as shift
WARNING: shift/reduce conflict for NE in state 82 resolved as shift
WARNING: shift/reduce conflict for EQ in state 82 resolved as shift
WARNING: shift/reduce conflict for LE in state 82 resolved as shift
WARNING: shift/reduce conflict for GE in state 82 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
WARNING: shift/reduce conflict for SUM in state 83 resolved as shift
WARNING: shift/reduce conflict for SUB in state 83 resolved as shift
WARNING: shift/reduce conflict for DIV in state 83 resolved as shift
WARNING: shift/reduce conflict for MUL in state 83 resolved as shift
WARNING: shift/reduce conflict for MOD in state 83 resolved as shift
WARNING: shift/reduce conflict for GT in state 83 resolved as shift
WARNING: shift/reduce conflict for LT in state 83 resolved as shift
WARNING: shift/reduce conflict for NE in state 83 resolved as shift
WARNING: shift/reduce conflict for EQ in state 83 resolved as shift
WARNING: shift/reduce conflict for LE in state 83 resolved as shift
WARNING: shift/reduce conflict for GE in state 83 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 146 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 146 resolved as shift
